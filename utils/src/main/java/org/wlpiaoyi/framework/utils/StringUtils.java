package org.wlpiaoyi.framework.utils;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.*;
import java.util.Base64;
import java.util.UUID;

public class StringUtils {

    static {

    }

    /**
     * 将bytes编码成base64
     * @param bytes
     * @return
     */
    public static String base64Encode(byte[] bytes) {
        return Base64.getMimeEncoder().encodeToString(bytes);
    }

        /**
         * 将字符编码成base64
         * @param encodeStr
         * @param charseName
         * @return
         */
    public static String base64Encode(String encodeStr, String charseName){
        try {
            return Base64.getMimeEncoder().encodeToString(encodeStr.getBytes(charseName));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * 将字符编码成base64
     * @param encodeStr
     * @return
     */
    public static String base64Encode(String encodeStr){
        return StringUtils.base64Encode(encodeStr, "UTF-8");
    }

    /**
     * 将base64字符解码
     * @param decodeStr
     * @param charseName
     * @return
     */
    public static String base64Decode(String decodeStr, String charseName){
        try {
            byte[] bytes = StringUtils.base64DecodeToBytes(decodeStr);
            return new String(bytes, charseName);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * 将base64字符解码
     * @param decodeStr
     * @return
     */
    public static byte[] base64DecodeToBytes(String decodeStr){

        return Base64.getMimeDecoder().decode(decodeStr);
    }

    /**
     * 将base64字符解码
     * @param decodeStr
     * @return
     */
    public static String base64Decode(String decodeStr){
        return StringUtils.base64Decode(decodeStr, "UTF-8");
    }

    /**
     * 已废弃请使用org.wlpiaoyi.framework.utils.ValueUtils.isBlank
     * @param arg
     * @return
     */
    @Deprecated
    public static boolean isBlank(String arg){
        return arg == null || arg.length() == 0;
    }
    @Deprecated
    public static String toJson(Object obj){
        Gson gson = new GsonBuilder().disableHtmlEscaping().create();
        return gson.toJson(obj);
    }

    /**
     * 获得指定数目的UUID
     * @param number int 需要获得的UUID数量
     * @return String[] UUID数组
     */
    public static String[] getUUID32S(int number){
        if(number < 1){
            return null;
        }
        StringBuilder uuid = new StringBuilder();
        String[] retArray = new String[number];
        for(int i=0;i<number;i++){
            retArray[i] = StringUtils.getUUID32();
        }
        return retArray;
    }

    /**
     * 获得指定数目的UUID
     * @param number int 需要获得的UUID数量
     * @return String[] UUID数组
     */
    public static String[] getUUID64S(int number){
        if(number < 1){
            return null;
        }
        String[] retArray = new String[number];
        for(int i=0;i<number;i++){
            retArray[i] = StringUtils.getUUID64();
        }
        return retArray;
    }


    /**
     * 获得一个UUID
     * @return String UUID
     */
    public static String getUUID64(){
        String uuid32_1 = StringUtils.getUUID32();
        String uuid32_2 = StringUtils.getUUID32();
        return uuid32_1 + uuid32_2;
    }

    /**
     * 获得一个UUID
     * @return String UUID
     */
    public static String getUUID32(){
        String uuid = UUID.randomUUID().toString().replace("-", "");
        return uuid;
    }

    /**
     * 下划线名称转换成驼峰
     * @param name
     * @return
     */
    public static String parseUnderlineToHump(String name){
        String[] args = name.split("\\_");
        StringBuffer sb = new StringBuffer();
        for (String arg : args){
            if(ValueUtils.isBlank(arg)){ continue; }
            if(arg.length() == 1){ sb.append(arg.toUpperCase()); continue; }
            sb.append(arg.substring(0, 1).toUpperCase());
            if(arg.length() == 1){ continue; }
            sb.append(arg.substring(1).toLowerCase());
        }
        if(sb.length() == 0){ return name; }
        return sb.toString();
    }
    /**
     * 下划线名称转换成驼峰
     * @param name
     * @return
     */
    public static String parseHumpToUnderline(String name){
        char[] cs = name.toCharArray();

        for(char c : cs){

        }
        String[] args = name.split("\\_");
        StringBuffer sb = new StringBuffer();
        for (String arg : args){
            if(ValueUtils.isBlank(arg)){ continue; }
            if(arg.length() == 1){ sb.append(arg.toUpperCase()); continue; }
            sb.append(arg.substring(0, 1).toUpperCase());
            if(arg.length() == 1){ continue; }
            sb.append(arg.substring(1).toLowerCase());
        }
        if(sb.length() == 0){ return name; }
        return sb.toString();
    }

    public static void main(String[] args) {
//        String a = parseUnderlineToHump("abc_deg_fc");
//        String b = parseUnderlineToHump(a);
        String bs = "PCFET0NUWVBFIGh0bWw+PGh0bWw+PGhlYWQ+PG1ldGEgY2hhcnNldD0iVVRGLTgiIC8+PG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIiAvPjxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIiAvPjx0aXRsZT7kuI3kuojnq4vmoYjnqIvluo88L3RpdGxlPjwvaGVhZD48Ym9keT48bWV0YSBjaGFyc2V0PSJVVEYtOCI+PG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj48bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+PHRpdGxlPuS4jeS6iOeri+ahiOeoi+W6jzwvdGl0bGU+CgkKCQk8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD11dGYtOCI+CgkJPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1TdHlsZS1UeXBlIiBjb250ZW50PSJ0ZXh0L2NzcyI+CgkJPG1ldGEgbmFtZT0iZ2VuZXJhdG9yIiBjb250ZW50PSJBc3Bvc2UuV29yZHMgZm9yIEphdmEgMTguNiI+CgkJPHRpdGxlPuWNt+Wul+aooeadvzwvdGl0bGU+CgkKCQoJCTxkaXY+CgkJCTx0YWJsZSBjZWxsc3BhY2luZz0iMCIgY2VsbHBhZGRpbmc9IjAiIHN0eWxlPSJtYXJnaW4tbGVmdDowLjAzcHQ7IGJvcmRlci1jb2xsYXBzZTpjb2xsYXBzZSI+CgkJCQk8dGJvZHk+PHRyPgoJCQkJCTx0ZCBzdHlsZT0iYm9yZGVyLXRvcDowLjc1cHQgc29saWQgI2ZmZmZmZjsgYm9yZGVyLXJpZ2h0OjAuNzVwdCBzb2xpZCAjZmZmZmZmOyBib3JkZXItbGVmdDowLjc1cHQgc29saWQgI2ZmZmZmZjsgYm9yZGVyLWJvdHRvbTowLjc1cHQgc29saWQgI2FhYWFhYTsgcGFkZGluZzowLjAzcHQgMC4wM3B0IDAuMDNwdCA5MC43MnB0OyB2ZXJ0aWNhbC1hbGlnbjptaWRkbGUiPgoJCQkJCQk8cCBzdHlsZT0ibWFyZ2luLXRvcDowcHQ7IG1hcmdpbi1sZWZ0OjU5Ljc1cHQ7IG1hcmdpbi1ib3R0b206MHB0OyB0ZXh0LWFsaWduOmNlbnRlcjsgcGFkZGluZy1sZWZ0OjMxcHQ7IGZvbnQtc2l6ZToxMnB0Ij4KCQkJCQkJCTxzcGFuIHN0eWxlPSJmb250LWZhbWlseTrlrovkvZM7IGNvbG9yOiMzMzMzMzM7IC1hdy1pbXBvcnQ6aWdub3JlIj4mbmJzcDs8L3NwYW4+CgkJCQkJCTwvcD4KCQkJCQk8L3RkPgoJCQkJCTx0ZCBzdHlsZT0iYm9yZGVyLXRvcDowLjc1cHQgc29saWQgI2ZmZmZmZjsgYm9yZGVyLXJpZ2h0OjAuNzVwdCBzb2xpZCAjZmZmZmZmOyBib3JkZXItbGVmdDowLjc1cHQgc29saWQgI2ZmZmZmZjsgYm9yZGVyLWJvdHRvbTowLjc1cHQgc29saWQgI2FhYWFhYTsgcGFkZGluZzowLjAzcHQgMC4wM3B0IDAuMDNwdCAxMjAuNzJwdDsgdmVydGljYWwtYWxpZ246bWlkZGxlIj4KCQkJCQkJPHAgc3R5bGU9Im1hcmdpbi10b3A6MHB0OyBtYXJnaW4tbGVmdDo4OS43NXB0OyBtYXJnaW4tYm90dG9tOjBwdDsgdGV4dC1hbGlnbjpjZW50ZXI7IHBhZGRpbmctbGVmdDozMXB0OyBmb250LXNpemU6MTJwdCI+CgkJCQkJCQk8c3BhbiBzdHlsZT0iZm9udC1mYW1pbHk65a6L5L2TOyBjb2xvcjojMzMzMzMzOyAtYXctaW1wb3J0Omlnbm9yZSI+Jm5ic3A7PC9zcGFuPgoJCQkJCQk8L3A+CgkJCQkJPC90ZD4KCQkJCQk8dGQgc3R5bGU9ImJvcmRlci10b3A6MC43NXB0IHNvbGlkICNmZmZmZmY7IGJvcmRlci1yaWdodDowLjc1cHQgc29saWQgI2ZmZmZmZjsgYm9yZGVyLWxlZnQ6MC43NXB0IHNvbGlkICNmZmZmZmY7IGJvcmRlci1ib3R0b206MC43NXB0IHNvbGlkICNhYWFhYWE7IHBhZGRpbmc6MC4wM3B0IDAuMDNwdCAwLjAzcHQgOTAuNzJwdDsgdmVydGljYWwtYWxpZ246bWlkZGxlIj4KCQkJCQkJPHAgc3R5bGU9Im1hcmdpbi10b3A6MHB0OyBtYXJnaW4tbGVmdDo1OS43NXB0OyBtYXJnaW4tYm90dG9tOjBwdDsgdGV4dC1hbGlnbjpjZW50ZXI7IHBhZGRpbmctbGVmdDozMXB0OyBmb250LXNpemU6MTJwdCI+CgkJCQkJCQk8c3BhbiBzdHlsZT0iZm9udC1mYW1pbHk65a6L5L2TOyBjb2xvcjojMzMzMzMzOyAtYXctaW1wb3J0Omlnbm9yZSI+Jm5ic3A7PC9zcGFuPgoJCQkJCQk8L3A+CgkJCQkJPC90ZD4KCQkJCQk8dGQgc3R5bGU9ImJvcmRlci10b3A6MC43NXB0IHNvbGlkICNmZmZmZmY7IGJvcmRlci1yaWdodDowLjc1cHQgc29saWQgI2ZmZmZmZjsgYm9yZGVyLWxlZnQ6MC43NXB0IHNvbGlkICNmZmZmZmY7IGJvcmRlci1ib3R0b206MC43NXB0IHNvbGlkICNhYWFhYWE7IHBhZGRpbmc6MC4wM3B0IDAuMDNwdCAwLjAzcHQgMTIwLjcycHQ7IHZlcnRpY2FsLWFsaWduOm1pZGRsZSI+CgkJCQkJCTxwIHN0eWxlPSJtYXJnaW4tdG9wOjBwdDsgbWFyZ2luLWxlZnQ6ODkuNzVwdDsgbWFyZ2luLWJvdHRvbTowcHQ7IHRleHQtYWxpZ246Y2VudGVyOyBwYWRkaW5nLWxlZnQ6MzFwdDsgZm9udC1zaXplOjEycHQiPgoJCQkJCQkJPHNwYW4gc3R5bGU9ImZvbnQtZmFtaWx5OuWui+S9kzsgY29sb3I6IzMzMzMzMzsgLWF3LWltcG9ydDppZ25vcmUiPiZuYnNwOzwvc3Bhbj4KCQkJCQkJPC9wPgoJCQkJCTwvdGQ+CgkJCQk8L3RyPgoJCQkJPHRyPgoJCQkJCTx0ZCBjb2xzcGFuPSI0IiBzdHlsZT0iYm9yZGVyOjAuNzVwdCBzb2xpZCAjYWFhYWFhOyBwYWRkaW5nOjE1LjAycHQgNy41MnB0OyB2ZXJ0aWNhbC1hbGlnbjptaWRkbGUiPgoJCQkJCQk8cCBzdHlsZT0ibWFyZ2luLXRvcDowcHQ7IG1hcmdpbi1ib3R0b206MHB0OyB0ZXh0LWFsaWduOmNlbnRlcjsgZm9udC1zaXplOjMwcHQiPjxzcGFuIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Ym94LXNpemluZzogYm9yZGVyLWJveDtwb3NpdGlvbjogcmVsYXRpdmU7Ym9yZGVyOiAxcHggc29saWQgcmVkO3BhZGRpbmc6IDRweCAxMHB4O3RleHQtaW5kZW50OiAwOyIgZGF0YS1ncm91cD0iY29udGVudCIgZGF0YS1pZD0iNnY1Y3FkcHlsMGciPjxzcGFuIGRhdGEtZmllbGQ9ImNhc2VUaXRsZSI+5qGI5Lu25qCH6aKYPC9zcGFuPjxzcGFuIGRhdGEta2V5PSJtYXJrZXIiIGRhdGEtaWQ9IjZ2NWNxZHB5bDBnIiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlO2Rpc3BsYXk6IGJsb2NrO3dpZHRoOiAxMHB4O2hlaWdodDogMTBweDtiYWNrZ3JvdW5kOnVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJBQUFBQVFDQVlBQUFBZjgvOWhBQUFCZlVsRVFWUTRqYTNUUFdzVVVSakY4ZCtkWFNkZHBsN1hKSzRvQlBkYmlJV1N4RDZ4amZoVytVVzBVaEFqcVNUTmRocFFTYXd0YkFJaDhRV1RHQWlKK3dVV0I3SmpNVFByWk5rVkJBL2M0czQ5NTMrZmVYaHU2Q1V0UTdxS1pkeEVlYmlIdDFqQlR0VWNLb0FZajNFZjBUQzFVQjh2OEFpOUtpREdPcTZQQ1E3clExRmhXdDcwNUIvQ2NLMm9Wb1EyN3BZbjhmdU9pWS92aEdaajRBNHpVeVkrYllwZnY2cEM3cUVkeVJ0V0c1aVRTV0gyaXZqTm10QnNDRE5UNHZVMTRYS0xaTElLcUdFNTlKTFdMbVlIZ0dZakQxeWNsdTBmY3E0dVhEZ3YrN1luWFZpU25YU3JrTStobDdSK3ladG9GQVRqd2xTYWVGYjFlcjZxKzFwdGxET041RVB5NS9ieW40dXlzNE5Eb1RVOTZNbVFma1R5Q1Jzbzdxem00YS9mcFF0TDBybEYyWDRCNmF3T0F6WWl2TVJwK1NYNzJkWGYycGJldWkwNzZjcU9qcVh6aTdLZEw3S2o0MnI0RkN2bEpEN0ZnNUg5R0s5bmVQamZSam5GWEZGSi95L0JQcDVqdnNpY2VZMmwycmlERzdoVUdBK3dJWC9PMjFYemIrSWlld0hnaXpiY0FBQUFBRWxGVGtTdVFtQ0MpO2JhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlO3RvcDogMCU7bGVmdDogNTAlO3RyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO2N1cnNvcjogcG9pbnRlcjsiPjwvc3Bhbj48L3NwYW4+PC9wPgoJCQkJCTwvdGQ+CgkJCQk8L3RyPgoJCQkJPHRyPgoJCQkJCTx0ZCBzdHlsZT0iYm9yZGVyOjAuNzVwdCBzb2xpZCAjYWFhYWFhOyBwYWRkaW5nOjAuMDNwdDsgdmVydGljYWwtYWxpZ246bWlkZGxlIj4KCQkJCQkJPHAgc3R5bGU9Im1hcmdpbi10b3A6MHB0OyBtYXJnaW4tYm90dG9tOjBwdDsgdGV4dC1hbGlnbjpjZW50ZXI7IGZvbnQtc2l6ZToxMnB0Ij4KCQkJCQkJCTxzcGFuIHN0eWxlPSJmb250LWZhbWlseTrlrovkvZM7IGZvbnQtd2VpZ2h0OmJvbGQ7IGNvbG9yOiMzMzMzMzMiPuW9k+S6i+S6ujwvc3Bhbj4KCQkJCQkJPC9wPgoJCQkJCTwvdGQ+CgkJCQkJPHRkIGNvbHNwYW49IjMiIHN0eWxlPSJib3JkZXI6MC43NXB0IHNvbGlkICNhYWFhYWE7IHBhZGRpbmc6MC4wM3B0OyB2ZXJ0aWNhbC1hbGlnbjptaWRkbGUiPgoJCQkJCQk8cCBzdHlsZT0ibWFyZ2luLXRvcDowcHQ7IG1hcmdpbi1ib3R0b206MHB0OyB0ZXh0LWFsaWduOmNlbnRlcjsgZm9udC1zaXplOjEycHQiPjxzcGFuIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Ym94LXNpemluZzogYm9yZGVyLWJveDtwb3NpdGlvbjogcmVsYXRpdmU7Ym9yZGVyOiAxcHggc29saWQgcmVkO3BhZGRpbmc6IDRweCAxMHB4O3RleHQtaW5kZW50OiAwOyIgZGF0YS1ncm91cD0iY29udGVudCIgZGF0YS1pZD0ieTJveGg1N3o3cW0iPjxzcGFuIGRhdGEtZmllbGQ9IiNsaXRpZ2FudCI+5b2T5LqL5Lq6PC9zcGFuPjxzcGFuIGRhdGEta2V5PSJtYXJrZXIiIGRhdGEtaWQ9Inkyb3hoNTd6N3FtIiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlO2Rpc3BsYXk6IGJsb2NrO3dpZHRoOiAxMHB4O2hlaWdodDogMTBweDtiYWNrZ3JvdW5kOnVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJBQUFBQVFDQVlBQUFBZjgvOWhBQUFCZlVsRVFWUTRqYTNUUFdzVVVSakY4ZCtkWFNkZHBsN1hKSzRvQlBkYmlJV1N4RDZ4amZoVytVVzBVaEFqcVNUTmRocFFTYXd0YkFJaDhRV1RHQWlKK3dVV0I3SmpNVFByWk5rVkJBL2M0czQ5NTMrZmVYaHU2Q1V0UTdxS1pkeEVlYmlIdDFqQlR0VWNLb0FZajNFZjBUQzFVQjh2OEFpOUtpREdPcTZQQ1E3clExRmhXdDcwNUIvQ2NLMm9Wb1EyN3BZbjhmdU9pWS92aEdaajRBNHpVeVkrYllwZnY2cEM3cUVkeVJ0V0c1aVRTV0gyaXZqTm10QnNDRE5UNHZVMTRYS0xaTElLcUdFNTlKTFdMbVlIZ0dZakQxeWNsdTBmY3E0dVhEZ3YrN1luWFZpU25YU3JrTStobDdSK3ladG9GQVRqd2xTYWVGYjFlcjZxKzFwdGxET041RVB5NS9ieW40dXlzNE5Eb1RVOTZNbVFma1R5Q1Jzbzdxem00YS9mcFF0TDBybEYyWDRCNmF3T0F6WWl2TVJwK1NYNzJkWGYycGJldWkwNzZjcU9qcVh6aTdLZEw3S2o0MnI0RkN2bEpEN0ZnNUg5R0s5bmVQamZSam5GWEZGSi95L0JQcDVqdnNpY2VZMmwycmlERzdoVUdBK3dJWC9PMjFYemIrSWlld0hnaXpiY0FBQUFBRWxGVGtTdVFtQ0MpO2JhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlO3RvcDogMCU7bGVmdDogNTAlO3RyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO2N1cnNvcjogcG9pbnRlcjsiPjwvc3Bhbj48L3NwYW4+PC9wPgoJCQkJCTwvdGQ+CgkJCQk8L3RyPgoJCQkJPHRyPgoJCQkJCTx0ZCBzdHlsZT0iYm9yZGVyOjAuNzVwdCBzb2xpZCAjYWFhYWFhOyBwYWRkaW5nOjE1LjAycHQgNy41MnB0OyB2ZXJ0aWNhbC1hbGlnbjptaWRkbGUiPgoJCQkJCQk8cCBzdHlsZT0ibWFyZ2luLXRvcDowcHQ7IG1hcmdpbi1ib3R0b206MHB0OyB0ZXh0LWFsaWduOmNlbnRlcjsgZm9udC1zaXplOjEycHQiPgoJCQkJCQkJPHNwYW4gc3R5bGU9ImZvbnQtZmFtaWx5OuWui+S9kzsgZm9udC13ZWlnaHQ6Ym9sZDsgY29sb3I6IzMzMzMzMyI+5qGI5Lu257yW5Y+3PC9zcGFuPgoJCQkJCQk8L3A+CgkJCQkJPC90ZD4KCQkJCQk8dGQgY29sc3Bhbj0iMyIgc3R5bGU9ImJvcmRlcjowLjc1cHQgc29saWQgI2FhYWFhYTsgcGFkZGluZzoxNS4wMnB0IDcuNTJwdDsgdmVydGljYWwtYWxpZ246bWlkZGxlIj4KCQkJCQkJPHAgc3R5bGU9Im1hcmdpbi10b3A6MHB0OyBtYXJnaW4tYm90dG9tOjBwdDsgdGV4dC1hbGlnbjpjZW50ZXI7IGZvbnQtc2l6ZToxMnB0Ij48c3BhbiBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrO2JveC1zaXppbmc6IGJvcmRlci1ib3g7cG9zaXRpb246IHJlbGF0aXZlO2JvcmRlcjogMXB4IHNvbGlkIHJlZDtwYWRkaW5nOiA0cHggMTBweDt0ZXh0LWluZGVudDogMDsiIGRhdGEtZ3JvdXA9ImNvbnRlbnQiIGRhdGEtaWQ9IjYybWJjZm9zZHNxIj48c3BhbiBkYXRhLWZpZWxkPSJjYXNlQ29kZSI+5qGI5Lu257yW5Y+3PC9zcGFuPjxzcGFuIGRhdGEta2V5PSJtYXJrZXIiIGRhdGEtaWQ9IjYybWJjZm9zZHNxIiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlO2Rpc3BsYXk6IGJsb2NrO3dpZHRoOiAxMHB4O2hlaWdodDogMTBweDtiYWNrZ3JvdW5kOnVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJBQUFBQVFDQVlBQUFBZjgvOWhBQUFCZlVsRVFWUTRqYTNUUFdzVVVSakY4ZCtkWFNkZHBsN1hKSzRvQlBkYmlJV1N4RDZ4amZoVytVVzBVaEFqcVNUTmRocFFTYXd0YkFJaDhRV1RHQWlKK3dVV0I3SmpNVFByWk5rVkJBL2M0czQ5NTMrZmVYaHU2Q1V0UTdxS1pkeEVlYmlIdDFqQlR0VWNLb0FZajNFZjBUQzFVQjh2OEFpOUtpREdPcTZQQ1E3clExRmhXdDcwNUIvQ2NLMm9Wb1EyN3BZbjhmdU9pWS92aEdaajRBNHpVeVkrYllwZnY2cEM3cUVkeVJ0V0c1aVRTV0gyaXZqTm10QnNDRE5UNHZVMTRYS0xaTElLcUdFNTlKTFdMbVlIZ0dZakQxeWNsdTBmY3E0dVhEZ3YrN1luWFZpU25YU3JrTStobDdSK3ladG9GQVRqd2xTYWVGYjFlcjZxKzFwdGxET041RVB5NS9ieW40dXlzNE5Eb1RVOTZNbVFma1R5Q1Jzbzdxem00YS9mcFF0TDBybEYyWDRCNmF3T0F6WWl2TVJwK1NYNzJkWGYycGJldWkwNzZjcU9qcVh6aTdLZEw3S2o0MnI0RkN2bEpEN0ZnNUg5R0s5bmVQamZSam5GWEZGSi95L0JQcDVqdnNpY2VZMmwycmlERzdoVUdBK3dJWC9PMjFYemIrSWlld0hnaXpiY0FBQUFBRWxGVGtTdVFtQ0MpO2JhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlO3RvcDogMCU7bGVmdDogNTAlO3RyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO2N1cnNvcjogcG9pbnRlcjsiPjwvc3Bhbj48L3NwYW4+PC9wPgoJCQkJCTwvdGQ+CgkJCQk8L3RyPgoJCQkJPHRyPgoJCQkJCTx0ZCBzdHlsZT0iYm9yZGVyOjAuNzVwdCBzb2xpZCAjYWFhYWFhOyBwYWRkaW5nOjE1LjAycHQgNy41MnB0OyB2ZXJ0aWNhbC1hbGlnbjptaWRkbGUiPgoJCQkJCQk8cCBzdHlsZT0ibWFyZ2luLXRvcDowcHQ7IG1hcmdpbi1ib3R0b206MHB0OyB0ZXh0LWFsaWduOmNlbnRlcjsgZm9udC1zaXplOjEycHQiPgoJCQkJCQkJPHNwYW4gc3R5bGU9ImZvbnQtZmFtaWx5OuWui+S9kzsgZm9udC13ZWlnaHQ6Ym9sZDsgY29sb3I6IzMzMzMzMyI+5qGI5Lu25o+P6L+wPC9zcGFuPgoJCQkJCQk8L3A+CgkJCQkJPC90ZD4KCQkJCQk8dGQgY29sc3Bhbj0iMyIgc3R5bGU9ImJvcmRlcjowLjc1cHQgc29saWQgI2FhYWFhYTsgcGFkZGluZzoxNS4wMnB0IDcuNTJwdDsgdmVydGljYWwtYWxpZ246bWlkZGxlIj4KCQkJCQkJPHAgc3R5bGU9Im1hcmdpbi10b3A6MHB0OyBtYXJnaW4tYm90dG9tOjBwdDsgdGV4dC1hbGlnbjpjZW50ZXI7IGZvbnQtc2l6ZToxMnB0Ij48c3BhbiBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrO2JveC1zaXppbmc6IGJvcmRlci1ib3g7cG9zaXRpb246IHJlbGF0aXZlO2JvcmRlcjogMXB4IHNvbGlkIHJlZDtwYWRkaW5nOiA0cHggMTBweDt0ZXh0LWluZGVudDogMDsiIGRhdGEtZ3JvdXA9ImNvbnRlbnQiIGRhdGEtaWQ9ImlnbGFxMHRpb2siPjxzcGFuIGRhdGEtZmllbGQ9ImNhc2VJbmZvIj7moYjku7bmj4/ov7A8L3NwYW4+PHNwYW4gZGF0YS1rZXk9Im1hcmtlciIgZGF0YS1pZD0iaWdsYXEwdGlvayIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTtkaXNwbGF5OiBibG9jazt3aWR0aDogMTBweDtoZWlnaHQ6IDEwcHg7YmFja2dyb3VuZDp1cmwoZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFCQUFBQUFRQ0FZQUFBQWY4LzloQUFBQmZVbEVRVlE0amEzVFBXc1VVUmpGOGQrZFhTZGRwbDdYSks0b0JQZGJpSVdTeEQ2eGpmaFcrVVcwVWhBanFTVE5kaHBRU2F3dGJBSWg4UVdUR0FpSit3VVdCN0pqTVRQclpOa1ZCQS9jNHM0OTUzK2ZlWGh1NkNVdFE3cUtaZHhFZWJpSHQxakJUdFVjS29BWWozRWYwVEMxVUI4djhBaTlLaURHT3E2UENRN3JRMUZoV3Q3MDVCL0NjSzJvVm9RMjdwWW44ZnVPaVkvdmhHWmo0QTR6VXlZK2JZcGZ2NnBDN3FFZHlSdFdHNWlUU1dIMml2ak5tdEJzQ0ROVDR2VTE0WEtMWkxJS3FHRTU5SkxXTG1ZSGdHWWpEMXljbHUwZmNxNHVYRGd2KzdZblhWaVNuWFNya00raGw3Uit5WnRvRkFUandsU2FlRmIxZXI2cSsxcHRsRE9ONUVQeTUvYnluNHV5czRORG9UVTk2TW1RZmtUeUNSc283cXptNGEvZnBRdEwwcmxGMlg0QjZhd09Bellpdk1ScCtTWDcyZFhmMnBiZXVpMDc2Y3FPanFYemk3S2RMN0tqNDJyNEZDdmxKRDdGZzVIOUdLOW5lUGpmUmpuRlhGRkoveS9CUHA1anZzaWNlWTJsMnJpREc3aFVHQSt3SVgvTzIxWHpiK0lpZXdIZ2l6YmNBQUFBQUVsRlRrU3VRbUNDKTtiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMTAwJTt0b3A6IDAlO2xlZnQ6IDUwJTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtjdXJzb3I6IHBvaW50ZXI7Ij48L3NwYW4+PC9zcGFuPjwvcD4KCQkJCQk8L3RkPgoJCQkJPC90cj4KCQkJCTx0cj4KCQkJCQk8dGQgc3R5bGU9ImJvcmRlcjowLjc1cHQgc29saWQgI2FhYWFhYTsgcGFkZGluZzoxNS4wMnB0IDcuNTJwdDsgdmVydGljYWwtYWxpZ246bWlkZGxlIj4KCQkJCQkJPHAgc3R5bGU9Im1hcmdpbi10b3A6MHB0OyBtYXJnaW4tYm90dG9tOjBwdDsgdGV4dC1hbGlnbjpjZW50ZXI7IGZvbnQtc2l6ZToxMnB0Ij4KCQkJCQkJCTxzcGFuIHN0eWxlPSJmb250LWZhbWlseTrlrovkvZM7IGZvbnQtd2VpZ2h0OmJvbGQ7IGNvbG9yOiMzMzMzMzMiPuahiOWPkeS9jee9rjwvc3Bhbj4KCQkJCQkJPC9wPgoJCQkJCTwvdGQ+CgkJCQkJPHRkIGNvbHNwYW49IjMiIHN0eWxlPSJib3JkZXI6MC43NXB0IHNvbGlkICNhYWFhYWE7IHBhZGRpbmc6MTUuMDJwdCA3LjUycHQ7IHZlcnRpY2FsLWFsaWduOm1pZGRsZSI+CgkJCQkJCTxwIHN0eWxlPSJtYXJnaW4tdG9wOjBwdDsgbWFyZ2luLWJvdHRvbTowcHQ7IHRleHQtYWxpZ246Y2VudGVyOyBmb250LXNpemU6MTJwdCI+PHNwYW4gc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jaztib3gtc2l6aW5nOiBib3JkZXItYm94O3Bvc2l0aW9uOiByZWxhdGl2ZTtib3JkZXI6IDFweCBzb2xpZCByZWQ7cGFkZGluZzogNHB4IDEwcHg7dGV4dC1pbmRlbnQ6IDA7IiBkYXRhLWdyb3VwPSJjb250ZW50IiBkYXRhLWlkPSJqbDlxY2E1eDhnZSI+PHNwYW4gZGF0YS1maWVsZD0ibG9jYXRpb25Qb3NpdGlvbiI+5qGI5Y+R5L2N572uPC9zcGFuPjxzcGFuIGRhdGEta2V5PSJtYXJrZXIiIGRhdGEtaWQ9ImpsOXFjYTV4OGdlIiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlO2Rpc3BsYXk6IGJsb2NrO3dpZHRoOiAxMHB4O2hlaWdodDogMTBweDtiYWNrZ3JvdW5kOnVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJBQUFBQVFDQVlBQUFBZjgvOWhBQUFCZlVsRVFWUTRqYTNUUFdzVVVSakY4ZCtkWFNkZHBsN1hKSzRvQlBkYmlJV1N4RDZ4amZoVytVVzBVaEFqcVNUTmRocFFTYXd0YkFJaDhRV1RHQWlKK3dVV0I3SmpNVFByWk5rVkJBL2M0czQ5NTMrZmVYaHU2Q1V0UTdxS1pkeEVlYmlIdDFqQlR0VWNLb0FZajNFZjBUQzFVQjh2OEFpOUtpREdPcTZQQ1E3clExRmhXdDcwNUIvQ2NLMm9Wb1EyN3BZbjhmdU9pWS92aEdaajRBNHpVeVkrYllwZnY2cEM3cUVkeVJ0V0c1aVRTV0gyaXZqTm10QnNDRE5UNHZVMTRYS0xaTElLcUdFNTlKTFdMbVlIZ0dZakQxeWNsdTBmY3E0dVhEZ3YrN1luWFZpU25YU3JrTStobDdSK3ladG9GQVRqd2xTYWVGYjFlcjZxKzFwdGxET041RVB5NS9ieW40dXlzNE5Eb1RVOTZNbVFma1R5Q1Jzbzdxem00YS9mcFF0TDBybEYyWDRCNmF3T0F6WWl2TVJwK1NYNzJkWGYycGJldWkwNzZjcU9qcVh6aTdLZEw3S2o0MnI0RkN2bEpEN0ZnNUg5R0s5bmVQamZSam5GWEZGSi95L0JQcDVqdnNpY2VZMmwycmlERzdoVUdBK3dJWC9PMjFYemIrSWlld0hnaXpiY0FBQUFBRWxGVGtTdVFtQ0MpO2JhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlO3RvcDogMCU7bGVmdDogNTAlO3RyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO2N1cnNvcjogcG9pbnRlcjsiPjwvc3Bhbj48L3NwYW4+PC9wPgoJCQkJCTwvdGQ+CgkJCQk8L3RyPgoJCQkJPHRyPgoJCQkJCTx0ZCBzdHlsZT0iYm9yZGVyOjAuNzVwdCBzb2xpZCAjYWFhYWFhOyBwYWRkaW5nOjE1LjAycHQgNy41MnB0OyB2ZXJ0aWNhbC1hbGlnbjptaWRkbGUiPgoJCQkJCQk8cCBzdHlsZT0ibWFyZ2luLXRvcDowcHQ7IG1hcmdpbi1ib3R0b206MHB0OyB0ZXh0LWFsaWduOmNlbnRlcjsgZm9udC1zaXplOjEycHQiPgoJCQkJCQkJPHNwYW4gc3R5bGU9ImZvbnQtZmFtaWx5OuWui+S9kzsgZm9udC13ZWlnaHQ6Ym9sZDsgY29sb3I6IzMzMzMzMyI+56uL5qGI5pel5pyfPC9zcGFuPgoJCQkJCQk8L3A+CgkJCQkJPC90ZD4KCQkJCQk8dGQgc3R5bGU9ImJvcmRlcjowLjc1cHQgc29saWQgI2FhYWFhYTsgcGFkZGluZzowLjAzcHQ7IHZlcnRpY2FsLWFsaWduOm1pZGRsZSI+CgkJCQkJCTxwIHN0eWxlPSJtYXJnaW4tdG9wOjBwdDsgbWFyZ2luLWJvdHRvbTowcHQ7IHRleHQtYWxpZ246Y2VudGVyOyBmb250LXNpemU6MTJwdCI+PHNwYW4gc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jaztib3gtc2l6aW5nOiBib3JkZXItYm94O3Bvc2l0aW9uOiByZWxhdGl2ZTtib3JkZXI6IDFweCBzb2xpZCByZWQ7cGFkZGluZzogNHB4IDEwcHg7dGV4dC1pbmRlbnQ6IDA7IiBkYXRhLWdyb3VwPSJjb250ZW50IiBkYXRhLWlkPSI3ZThwN3hpMGZycCI+PHNwYW4gZGF0YS1maWVsZD0iY2FzZVRpbWUiPueri+ahiOaXtumXtDwvc3Bhbj48c3BhbiBkYXRhLWtleT0ibWFya2VyIiBkYXRhLWlkPSI3ZThwN3hpMGZycCIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTtkaXNwbGF5OiBibG9jazt3aWR0aDogMTBweDtoZWlnaHQ6IDEwcHg7YmFja2dyb3VuZDp1cmwoZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFCQUFBQUFRQ0FZQUFBQWY4LzloQUFBQmZVbEVRVlE0amEzVFBXc1VVUmpGOGQrZFhTZGRwbDdYSks0b0JQZGJpSVdTeEQ2eGpmaFcrVVcwVWhBanFTVE5kaHBRU2F3dGJBSWg4UVdUR0FpSit3VVdCN0pqTVRQclpOa1ZCQS9jNHM0OTUzK2ZlWGh1NkNVdFE3cUtaZHhFZWJpSHQxakJUdFVjS29BWWozRWYwVEMxVUI4djhBaTlLaURHT3E2UENRN3JRMUZoV3Q3MDVCL0NjSzJvVm9RMjdwWW44ZnVPaVkvdmhHWmo0QTR6VXlZK2JZcGZ2NnBDN3FFZHlSdFdHNWlUU1dIMml2ak5tdEJzQ0ROVDR2VTE0WEtMWkxJS3FHRTU5SkxXTG1ZSGdHWWpEMXljbHUwZmNxNHVYRGd2KzdZblhWaVNuWFNya00raGw3Uit5WnRvRkFUandsU2FlRmIxZXI2cSsxcHRsRE9ONUVQeTUvYnluNHV5czRORG9UVTk2TW1RZmtUeUNSc283cXptNGEvZnBRdEwwcmxGMlg0QjZhd09Bellpdk1ScCtTWDcyZFhmMnBiZXVpMDc2Y3FPanFYemk3S2RMN0tqNDJyNEZDdmxKRDdGZzVIOUdLOW5lUGpmUmpuRlhGRkoveS9CUHA1anZzaWNlWTJsMnJpREc3aFVHQSt3SVgvTzIxWHpiK0lpZXdIZ2l6YmNBQUFBQUVsRlRrU3VRbUNDKTtiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMTAwJTt0b3A6IDAlO2xlZnQ6IDUwJTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtjdXJzb3I6IHBvaW50ZXI7Ij48L3NwYW4+PC9zcGFuPjwvcD4KCQkJCQk8L3RkPgoJCQkJCTx0ZCBzdHlsZT0iYm9yZGVyOjAuNzVwdCBzb2xpZCAjYWFhYWFhOyBwYWRkaW5nOjE1LjAycHQgNy41MnB0OyB2ZXJ0aWNhbC1hbGlnbjptaWRkbGUiPgoJCQkJCQk8cCBzdHlsZT0ibWFyZ2luLXRvcDowcHQ7IG1hcmdpbi1ib3R0b206MHB0OyB0ZXh0LWFsaWduOmNlbnRlcjsgZm9udC1zaXplOjEycHQiPgoJCQkJCQkJPHNwYW4gc3R5bGU9ImZvbnQtZmFtaWx5OuWui+S9kzsgZm9udC13ZWlnaHQ6Ym9sZDsgY29sb3I6IzMzMzMzMyI+57uT5qGI5pel5pyfPC9zcGFuPgoJCQkJCQk8L3A+CgkJCQkJPC90ZD4KCQkJCQk8dGQgc3R5bGU9ImJvcmRlcjowLjc1cHQgc29saWQgI2FhYWFhYTsgcGFkZGluZzowLjAzcHQ7IHZlcnRpY2FsLWFsaWduOm1pZGRsZSI+CgkJCQkJCTxwIHN0eWxlPSJtYXJnaW4tdG9wOjBwdDsgbWFyZ2luLWJvdHRvbTowcHQ7IHRleHQtYWxpZ246Y2VudGVyOyBmb250LXNpemU6MTJwdCI+PHNwYW4gc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jaztib3gtc2l6aW5nOiBib3JkZXItYm94O3Bvc2l0aW9uOiByZWxhdGl2ZTtib3JkZXI6IDFweCBzb2xpZCByZWQ7cGFkZGluZzogNHB4IDEwcHg7dGV4dC1pbmRlbnQ6IDA7IiBkYXRhLWdyb3VwPSJjb250ZW50IiBkYXRhLWlkPSI0ajhiNGd0NzFnYyI+PHNwYW4gZGF0YS1maWVsZD0idXBkYXRlVGltZSI+5aSE55CG5pe26Ze0PC9zcGFuPjxzcGFuIGRhdGEta2V5PSJtYXJrZXIiIGRhdGEtaWQ9IjRqOGI0Z3Q3MWdjIiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlO2Rpc3BsYXk6IGJsb2NrO3dpZHRoOiAxMHB4O2hlaWdodDogMTBweDtiYWNrZ3JvdW5kOnVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJBQUFBQVFDQVlBQUFBZjgvOWhBQUFCZlVsRVFWUTRqYTNUUFdzVVVSakY4ZCtkWFNkZHBsN1hKSzRvQlBkYmlJV1N4RDZ4amZoVytVVzBVaEFqcVNUTmRocFFTYXd0YkFJaDhRV1RHQWlKK3dVV0I3SmpNVFByWk5rVkJBL2M0czQ5NTMrZmVYaHU2Q1V0UTdxS1pkeEVlYmlIdDFqQlR0VWNLb0FZajNFZjBUQzFVQjh2OEFpOUtpREdPcTZQQ1E3clExRmhXdDcwNUIvQ2NLMm9Wb1EyN3BZbjhmdU9pWS92aEdaajRBNHpVeVkrYllwZnY2cEM3cUVkeVJ0V0c1aVRTV0gyaXZqTm10QnNDRE5UNHZVMTRYS0xaTElLcUdFNTlKTFdMbVlIZ0dZakQxeWNsdTBmY3E0dVhEZ3YrN1luWFZpU25YU3JrTStobDdSK3ladG9GQVRqd2xTYWVGYjFlcjZxKzFwdGxET041RVB5NS9ieW40dXlzNE5Eb1RVOTZNbVFma1R5Q1Jzbzdxem00YS9mcFF0TDBybEYyWDRCNmF3T0F6WWl2TVJwK1NYNzJkWGYycGJldWkwNzZjcU9qcVh6aTdLZEw3S2o0MnI0RkN2bEpEN0ZnNUg5R0s5bmVQamZSam5GWEZGSi95L0JQcDVqdnNpY2VZMmwycmlERzdoVUdBK3dJWC9PMjFYemIrSWlld0hnaXpiY0FBQUFBRWxGVGtTdVFtQ0MpO2JhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlO3RvcDogMCU7bGVmdDogNTAlO3RyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO2N1cnNvcjogcG9pbnRlcjsiPjwvc3Bhbj48L3NwYW4+PC9wPgoJCQkJCTwvdGQ+CgkJCQk8L3RyPgoJCQk8L3Rib2R5PjwvdGFibGU+CgkJCTxwIHN0eWxlPSJtYXJnaW4tdG9wOjBwdDsgbWFyZ2luLWJvdHRvbTowcHQ7IGZvbnQtc2l6ZToxMnB0Ij4KCQkJCTxzcGFuIHN0eWxlPSJmb250LWZhbWlseTrlrovkvZM7IC1hdy1pbXBvcnQ6aWdub3JlIj4mbmJzcDs8L3NwYW4+CgkJCTwvcD4KCQk8L2Rpdj4KCQoKPC9ib2R5PjwvaHRtbD4K";
        System.out.println(StringUtils.base64Decode(bs));
         bs = "eyJ4Y3duNXRnZXdzcyI6IlxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBzdHlsZT1cImZvbnQtZmFtaWx5Ouetiee6v1wiPlRlc3QgPC9zcGFuPjxzcGFuIHN0eWxlPVwiZm9udC1mYW1pbHk6562J57q/XCI+Lzwvc3Bhbj5cblx0XHRcdFx0XHRcdCIsImw2NmdsMjEwOGJjIjoiXG5cdFx0XHRcdFx0XHRcdDxzcGFuIHN0eWxlPVwiZm9udC1mYW1pbHk6562J57q/XCI+Lzwvc3Bhbj5cblx0XHRcdFx0XHRcdCIsIjEwMGFxbjNyb2pwZyI6IlxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBzdHlsZT1cImZvbnQtZmFtaWx5Ouetiee6v1wiPi88L3NwYW4+XG5cdFx0XHRcdFx0XHQiLCJ2ZHd4b3VkNWgzcyI6IlxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBzdHlsZT1cImZvbnQtZmFtaWx5Ouetiee6v1wiPi88L3NwYW4+XG5cdFx0XHRcdFx0XHQiLCI2djVjcWRweWwwZyI6IlxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBzdHlsZT1cImZvbnQtZmFtaWx5OuWui+S9kzsgZm9udC13ZWlnaHQ6Ym9sZDsgY29sb3I6IzMzMzMzM1wiPi8gPC9zcGFuPlxuXHRcdFx0XHRcdFx0IiwieTJveGg1N3o3cW0iOiJcblx0XHRcdFx0XHRcdFx0PHNwYW4gc3R5bGU9XCJmb250LWZhbWlseTrlrovkvZM7IGNvbG9yOiMzMzMzMzNcIj4vIDwvc3Bhbj5cblx0XHRcdFx0XHRcdCIsIjYybWJjZm9zZHNxIjoiXG5cdFx0XHRcdFx0XHRcdDxzcGFuIHN0eWxlPVwiZm9udC1mYW1pbHk65a6L5L2TOyBjb2xvcjojMzMzMzMzXCI+LyA8L3NwYW4+XG5cdFx0XHRcdFx0XHQiLCJpZ2xhcTB0aW9rIjoiXG5cdFx0XHRcdFx0XHRcdDxzcGFuIHN0eWxlPVwiZm9udC1mYW1pbHk65a6L5L2TOyBjb2xvcjojMzMzMzMzXCI+LyA8L3NwYW4+XG5cdFx0XHRcdFx0XHQiLCJqbDlxY2E1eDhnZSI6IlxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBzdHlsZT1cImZvbnQtZmFtaWx5OuWui+S9kzsgY29sb3I6IzMzMzMzM1wiPi8gPC9zcGFuPlxuXHRcdFx0XHRcdFx0IiwiN2U4cDd4aTBmcnAiOiJcblx0XHRcdFx0XHRcdFx0PHNwYW4gc3R5bGU9XCJmb250LWZhbWlseTrlrovkvZM7IGNvbG9yOiMzMzMzMzNcIj4vIDwvc3Bhbj5cblx0XHRcdFx0XHRcdCIsIjRqOGI0Z3Q3MWdjIjoiXG5cdFx0XHRcdFx0XHRcdDxzcGFuIHN0eWxlPVwiZm9udC1mYW1pbHk65a6L5L2TOyBjb2xvcjojMzMzMzMzXCI+LyA8L3NwYW4+XG5cdFx0XHRcdFx0XHQifQ==";
        System.out.println(StringUtils.base64Decode(bs));
    }

}
